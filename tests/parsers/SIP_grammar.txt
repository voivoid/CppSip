;;;;; ABNF

ALPHA          =  %x41-5A / %x61-7A ; A-Z / a-z
CR             =  %x0D ; carriage return
CRLF           =  CR LF ; Internet standard newline
DIGIT          =  %x30-39 ; 0-9
DQUOTE         =  %x22 ; " (Double Quote)
HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
HTAB           =  %x09 ; horizontal tab
LF             =  %x0A ; linefeed
SP             =  %x20
WSP            =  SP / HTAB ; white space

;;;;; SIP Common

alphanum  =  ALPHA / DIGIT

LWS  =  [*WSP CRLF] 1*WSP ; linear whitespace
SWS  =  [LWS] ; sep whitespace
COLON   = SWS ":" SWS ; colon
COMMA   = SWS "," SWS ; comma
HCOLON  = *( SP / HTAB ) ":" SWS

SLASH   =  SWS "/" SWS ; slash
SEMI    =  SWS ";" SWS ; semicolon
STAR    =  SWS "*" SWS ; asterisk
EQUAL   =  SWS "=" SWS ; equal
RAQUOT  =  ">" SWS ; right angle quote
LAQUOT  =  SWS "<"; left angle quote

quoted-pair  =  "\" (%x01-09 / %x0B-0C / %x0E-7F)

quoted-string  =  SWS DQUOTE *(qdtext / quoted-pair ) DQUOTE
qdtext         =  LWS / %x21 / %x23-5B / %x5D-7E ; / UTF8-NONASCII (!!!)
qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                  / ( "1" [ "." 0*3("0") ] )

token       =  1*(alphanum / "-" / "." / "!" / "%" / "*" / "_" / "+" / "`" / "'" / "~" )
mark        =  "-" / "_" / "." / "!" / "~" / "*" / "'" / "(" / ")"
unreserved  =  alphanum / mark
reserved    =  ";" / "/" / "?" / ":" / "@" / "&" / "=" / "+" / "$" / ","
escaped     =  "%" HEXDIG HEXDIG

Method            =  INVITEm / ACKm / OPTIONSm / BYEm / CANCELm / REGISTERm ; / extension-method (!!!)
INVITEm           =  %x49.4E.56.49.54.45 ; INVITE in caps
ACKm              =  %x41.43.4B ; ACK in caps
OPTIONSm          =  %x4F.50.54.49.4F.4E.53 ; OPTIONS in caps
BYEm              =  %x42.59.45 ; BYE in caps
CANCELm           =  %x43.41.4E.43.45.4C ; CANCEL in caps
REGISTERm         =  %x52.45.47.49.53.54.45.52 ; REGISTER in caps

SIP-Version    =  "SIP" "/" dec-octet "." dec-octet

word        =  1*(alphanum / "-" / "." / "!" / "%" / "*" /
               "_" / "+" / "`" / "'" / "~" /
               "(" / ")" / "<" / ">" /
               ":" / "\" / DQUOTE /
               "/" / "[" / "]" / "?" /
               "{" / "}" )

callid   =  word [ "@" word ]

headers         =  "?" header *( "&" header )
header          =  hname "=" hvalue
hname           =  1*( hnv-unreserved / unreserved / escaped )
hvalue          =  *( hnv-unreserved / unreserved / escaped )
hnv-unreserved  =  "[" / "]" / "/" / "?" / ":" / "+" / "$"

domainlabel      =  alphanum / alphanum *( alphanum / "-" ) alphanum
toplabel         =  ALPHA / ALPHA *( alphanum / "-" ) alphanum
hostname         =  *( domainlabel "." ) toplabel [ "." ]
port             =  1*4DIGIT

IPv6reference  =  "[" IPv6address "]"

IPv6address   =                            6( h16 ":" ) ls32
              /                       "::" 5( h16 ":" ) ls32
              / [               h16 ] "::" 4( h16 ":" ) ls32
              / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
              / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
              / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
              / [ *4( h16 ":" ) h16 ] "::"              ls32
              / [ *5( h16 ":" ) h16 ] "::"              h16
              / [ *6( h16 ":" ) h16 ] "::"

h16           = 1*4HEXDIG
ls32          = ( h16 ":" h16 ) / IPv4address
IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
dec-octet     = DIGIT                 ; 0-9
              / %x31-39 DIGIT         ; 10-99
              / "1" 2DIGIT            ; 100-199
              / "2" %x30-34 DIGIT     ; 200-249
              / "25" %x30-35          ; 250-255

host             =  hostname / IPv4address ; / IPv6reference (!!!)
hostport         =  host [ ":" port ]

password         =  *( unreserved / escaped / "&" / "=" / "+" / "$" / "," )
userinfo         =  ( user ) [ ":" password ] "@" ; telephone-subscriber (!!!)
user             =  1*( unreserved / escaped / user-unreserved )
user-unreserved  =  "&" / "=" / "+" / "$" / "," / ";" / "?" / "/"

SIP-URI          =  "sip:" [ userinfo ] hostport [ headers ] ; uri-parameters (!!!)
SIPS-URI         =  "sips:" [ userinfo ] hostport [ headers ] ; uri-parameters (!!!)

sent-protocol     =  protocol-name SLASH protocol-version
                     SLASH transport
protocol-name     =  "SIP" / token
protocol-version  =  token
transport         =  "UDP" / "TCP" / "TLS" / "SCTP"
                     / other-transport
other-transport = token
sent-by           = host [ COLON port ]
ttl               = dec-octet

;;;;; SIP Headers

ietf-token       =  token
iana-token       =  token
m-attribute      =  token
x-token          =  "x-" token
m-subtype        =  extension-token / iana-token
extension-token  =  ietf-token / x-token
discrete-type    =  "text" / "image" / "audio" / "video" / "application" / extension-token
composite-type   =  "message" / "multipart" / extension-token
m-type           =  discrete-type / composite-type
m-value          =  token / quoted-string
m-parameter      =  m-attribute EQUAL m-value
media-type       =  m-type SLASH m-subtype *(SEMI m-parameter)

display-name   =  *(token LWS)/ quoted-string
addr-spec      =  SIP-URI / SIPS-URI ; / absoluteURI (!!!)
name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
generic-param  =  token [ EQUAL gen-value ]
gen-value      =  token / host / quoted-string
tag-param      =  "tag" EQUAL token
from-param  =  tag-param / generic-param
from-spec   =  ( name-addr / addr-spec )
               *( SEMI from-param )
to-param  =  tag-param / generic-param

via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
via-params        =  via-ttl / via-maddr
                     / via-received / via-branch
                     / via-extension
via-ttl           =  "ttl" EQUAL ttl
via-maddr         =  "maddr" EQUAL host
via-received      =  "received" EQUAL (IPv4address) ; IPv6address (!!!)
via-branch        =  "branch" EQUAL token
via-extension     =  generic-param

contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
contact-params     =  c-p-q / c-p-expires
                      / contact-extension
c-p-q              =  "q" EQUAL qvalue
c-p-expires        =  "expires" EQUAL delta-seconds
contact-extension  =  generic-param
delta-seconds      =  1*9DIGIT

Call-ID        = ( "Call-ID" / "i" ) HCOLON callid
Contact        =  ("Contact" / "m" ) HCOLON ( STAR / (contact-param *(COMMA contact-param)))
Content-Length = ( "Content-Length" / "l" ) HCOLON 1*9DIGIT
Content-Type   = ( "Content-Type" / "c" ) HCOLON media-type
CSeq           = "CSeq" HCOLON 1*DIGIT LWS Method
From           = ( "From" / "f" ) HCOLON from-spec
Max-Forwards   = "Max-Forwards" HCOLON 1*9DIGIT
To             = ( "To" / "t" ) HCOLON ( name-addr / addr-spec ) *( SEMI to-param )
Via            = ( "Via" / "v" ) HCOLON via-parm *(COMMA via-parm)

message-header = ( Call-ID /
                   Contact /
                   Content-Length /
                   Content-Type /
                   CSeq /
                   From /
                   Max-Forwards /
                   To /
                   Via ) CRLF ; extension-header (!!!)

;;;;; SIP Request

Request-URI    =  SIP-URI / SIPS-URI; / absoluteURI (!!!)
Request-Line   =  Method SP Request-URI SP SIP-Version CRLF
Request        =  Request-Line *( message-header ) CRLF ; [ message-body ] (!!!)

;;;;; SIP Response

Reason-Phrase   =  *(reserved / unreserved / escaped / SP / HTAB ) ; UTF8-NONASCII / UTF8-CONT (!!!)
Status-Line     =  SIP-Version SP Status-Code SP Reason-Phrase CRLF
Status-Code     =  Informational / Redirection / Success / Client-Error / Server-Error / Global-Failure ; /   extension-code (!!!)

Informational  =  "100"  ;  Trying
              /   "180"  ;  Ringing
              /   "181"  ;  Call Is Being Forwarded
              /   "182"  ;  Queued
              /   "183"  ;  Session Progress

Success  =  "200"  ;  OK

Redirection  =  "300"  ;  Multiple Choices
            /   "301"  ;  Moved Permanently
            /   "302"  ;  Moved Temporarily
            /   "305"  ;  Use Proxy
            /   "380"  ;  Alternative Service

Client-Error  =  "400"  ;  Bad Request
             /   "401"  ;  Unauthorized
             /   "402"  ;  Payment Required
             /   "403"  ;  Forbidden
             /   "404"  ;  Not Found
             /   "405"  ;  Method Not Allowed
             /   "406"  ;  Not Acceptable
             /   "407"  ;  Proxy Authentication Required
             /   "408"  ;  Request Timeout
             /   "410"  ;  Gone
             /   "413"  ;  Request Entity Too Large
             /   "414"  ;  Request-URI Too Large
             /   "415"  ;  Unsupported Media Type
             /   "416"  ;  Unsupported URI Scheme
             /   "420"  ;  Bad Extension
             /   "421"  ;  Extension Required
             /   "423"  ;  Interval Too Brief
             /   "480"  ;  Temporarily not available
             /   "481"  ;  Call Leg/Transaction Does Not Exist
             /   "482"  ;  Loop Detected
             /   "483"  ;  Too Many Hops
             /   "484"  ;  Address Incomplete
             /   "485"  ;  Ambiguous
             /   "486"  ;  Busy Here
             /   "487"  ;  Request Terminated
             /   "488"  ;  Not Acceptable Here
             /   "491"  ;  Request Pending
             /   "493"  ;  Undecipherable

Server-Error  =  "500"  ;  Internal Server Error
             /   "501"  ;  Not Implemented
             /   "502"  ;  Bad Gateway
             /   "503"  ;  Service Unavailable
             /   "504"  ;  Server Time-out
             /   "505"  ;  SIP Version not supported
             /   "513"  ;  Message Too Large

Global-Failure  =  "600"  ;  Busy Everywhere
               /   "603"  ;  Decline
               /   "604"  ;  Does not exist anywhere
               /   "606"  ;  Not Acceptable


Response          =  Status-Line *( message-header ) CRLF ; [ message-body ] (!!!)

;;;;; SIP Message

SIP-message    =  Request / Response
